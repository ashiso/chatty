var util = require("util");
var nodemailer = require("nodemailer");
var request = require("request");
var url = require("url");
var HoodieWorker  = require('hoodie-worker');

function EmailWorker(config) {
  this._config = config;
  this.setup(config).then( this.launch.bind(this) )
}
util.inherits(EmailWorker, HoodieWorker);

EmailWorker.prototype.launch = function() {
  var that = this;

  var user_feed = this.couch.database("_users").changes({include_docs:true});
  user_feed.on("change", function(change) {
    if(change.doc.ownerHash) {
      var username = change.doc.ownerHash;
      console.log("[email-out] binding to db: %j", username);
      EmailWorker.prototype.db.bind(that, "user/" + username)();
    }
  });
};

EmailWorker.prototype.db = function(db) {
  // your worker magic starts hier!
  // console.warn("EmailWorker running on db: " + db);
  // console.warn("With config: %j", config)


  console.log("[email-out] Starting EmailOut Worker for " + db);
  this.userdb = this.couch.database(db);
  var feed = this.userdb.changes({include_docs: true});

  feed.on("change", EmailWorker.prototype._change_cb.bind(this));
  feed.on("error", function(error) {
    console.warn("[email-out] email change_cb caught error: %j", error);
    // todo report error
    return;
  });
  console.log("[email-out] Started EmailOut Worker for " + db);
};

EmailWorker.prototype._change_cb = function(change) {
  console.log("change");
  var doc = change.doc;

  if(!doc) {
    console.warn("[email-out] no doc error wakka wakka");
    return;
  }

  if(change.deleted) {
    console.warn("[email-out] email deleted, ignoring.");
    return;
  }


  if(doc.type && doc.type !== "$email") {
    console.warn("[email-out] not an email doc, ignoring.");
    return;
  }

  if(!doc.to) {
    console.warn("[email-out] empty or no 'to' field, ignoring.");
    // set error actually
    return;
  }

  if(!doc.to.match(/@/)) {
    console.warn("[email-out] invalid 'to' field, ignoring.");
    // set error actually
    return;
  }

  if(doc.error || doc.sentAt) {
    console.warn("[email-out] we did try sending this once, ignoring.");
    return;
  }

  // console.warn("change: %j", change);

  // send!
  this._doSend(doc, {
    success: (function() {
      // yay
      delete doc.transport;
      doc.sentAt = new Date().toJSON();
      this.userdb.save(doc._id, doc._rev, doc);
    }).bind(this),
    error: (function(error) {

      // nooooo
      doc.error = error;
      this.userdb.save(doc._id, doc._rev, doc);
    }).bind(this)
  });
};

EmailWorker.prototype._doSend = function(email, callbacks) {
  if (! this.config.app.email) {
    callbacks.error("Email is not configured for this app yet.")
    return
  }

    


  console.log("[email-out] sending");
  // send email
  // create reusable transport method (opens pool of SMTP connections)
  var transport = this.config.app.email.transport;
  var transport_config = {
    host: transport.host,
    port: 465,
    auth: {
      user: transport.auth.user,
      pass: transport.auth.pass
    },
    secureConnection: true,
    service: transport.service
  };
  var smtpTransport = nodemailer.createTransport("SMTP", transport_config);

  // send mail with defined transport object
  var parsedEmail = this._parseObject(email)
  console.log(JSON.stringify(parsedEmail, '', '  '))
  smtpTransport.sendMail(parsedEmail, function(error, response){
    if(error) {
      if(callbacks.error) {
        console.log("[email-out] Mail not sent: " + error);
        callbacks.error(error);
      }
    } else {
      if(callbacks.success) {
        callbacks.success(response);
      }
    }
    smtpTransport.close(); // shut down the connection pool, no more messages
    console.log("[email-out] sent");
  });
}

// {
//    "_id": "$email/asscteo",
//    "_rev": "2-c22601215da2cd400198ff0ee4ea15c8",
//    "to": "gregor@martynus.net",
//    "subject": "Invoice #",
//    "html": "<h1>Look, ma!</h1>",
//    "text": "Look, ma!",
//    "createdBy": "p7whlcx",
//    "updatedAt": "2013-04-21T11:10:04.155Z",
//    "createdAt": "2013-04-21T11:10:04.155Z",
//    "type": "$email"
// }
EmailWorker.prototype._parseObject = function(emailObject) {
  return {
    from: emailObject.from,
    to: emailObject.to,
    cc: emailObject.cc,
    bcc: emailObject.bcc,
    replyTo: emailObject.replyTo,
    subject: emailObject.subject,
    text: emailObject.text,
    html: emailObject.html,
    attachments: this._parseAttachments(emailObject),

    // other options
    forceEmbeddedImages: true
  };
};

//    {
//        "invoice.png": {
//            "content_type": "image/png",
//            "revpos": 0,
//            "digest": "md5-XZbuggyoUisYzyYoHYwDEg==",
//            "length": 61156,
//            "stub": true
//        }
//    }
EmailWorker.prototype._parseAttachments = function(emailObject) {
  var attachmentsMap   = emailObject._attachments
  var objectPath       = encodeURIComponent("user/" + emailObject.createdBy) + "/" + encodeURIComponent(emailObject._id)
  var attachmentsArray = []
  if (! attachmentsMap) return attachmentsArray;

  for (var fileName in attachmentsMap) {
    attachmentsArray.push({
      fileName : fileName,
      filePath : this.couch._url( objectPath + "/" + fileName).replace(/^(https?:\/\/)/, "$1" + this.couch.options.auth.username + ':' + this.couch.options.auth.password + '@'),
      contentType : attachmentsMap[fileName].content_type
    })
  }

  return attachmentsArray;
}

module.exports = function (config, hoodie) {
    return new EmailWorker(config, hoodie);
};