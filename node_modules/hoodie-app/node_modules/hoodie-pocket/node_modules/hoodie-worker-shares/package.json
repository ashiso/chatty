{
  "name": "hoodie-worker-shares",
  "version": "0.0.5",
  "description": "handles sharing of objects between users or publicly",
  "author": {
    "name": "Hoodie"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hoodiehq/worker-shares.git"
  },
  "main": "lib/worker.js",
  "dependencies": {
    "hoodie-worker": "git://github.com/hoodiehq/hoodie-worker.git"
  },
  "devDependencies": {
    "jasmine-node": "*",
    "when": "~1.7",
    "when-promisify": "*"
  },
  "scripts": {
    "test": "jasmine-node spec",
    "start": "node index.js"
  },
  "readme": "[![Build Status](https://travis-ci.org/hoodiehq/worker-shares.png?branch=master)](https://travis-ci.org/hoodiehq/worker-shares)\n\nHoodie Shares Worker\n======================\n\nThis worker handles sharing of objects between users or publicly.\n\n\n\nWhat happens behind the curtain\n---------------------------------\n\nThe worker follows all userdatabases.\nHere's an example (simplified) `$share` object created by a user:\n\n```json\n{\n  \"_id\"  : \"$share/uuid567\",\n  \"_ref\" : \"1-bl2xa#1346886508617\",\n  \"type\" : \"$share\"\n}\n```\n\nThe worker picks it up, creates a database \"share/uuid567\" and a \ncontinuous replication from user's database. \n\nWhenever the user adds an object to the sharing, the share id will be \nadded to $sharedAt attribute\n\n```json\n{\n  \"_id\"     : \"todo/abc4567\",\n  \"type\"    : \"todo\",\n  \"name\"    : \"Remeber the mild\",\n  \"owner\"   : \"joe@example.com\",\n  \"$sharedAt\" : \"uuid567\"\n}\n```\n```\n\n\nWhenever the user removes an object from a sharing, an `$unshared : true`\nproperty gets added, so that the worker can react on it and remove the object \nfrom the $shares database. Once the object has been removed, both the `$unshared`\nand the `$sharedAt` attributes will get removed\n\n\nThe shares database\n---------------------\n\nWhen a user creates a new share, the database gets not created directly.\nInstead, the $share object gets copied to the shares database. Once it\nwas copied successfully, the actuall database gets created. Same with\nremoving shares. \n\nThis has two benefits\n\n1. It provides a central place to follow all activity regarding shares\n2. Shares can be managed by directly interacting with the shares database,\n   e.g. as admin from pocket.\n\nIt also helps with debugging, wich should not be underestimate, as the\nshares worker is pretty complex.\n\nThe shares database does not only hold $share objects, but also $subscription\nobjects, that represent replications. They work the same way as middle man\nas the $share objects, for the same reason.\n\n\nThe access setting\n--------------------\n\nthe `access` setting  \nthe access setting defines who can read and/or write to the sharing. Default\nvalue is false, meaning only the creator has access. `true` means the sharing\nis public. More granular settings are possible as well:  \n\n`{read: true}` public sharing, but read only  \n`{read: [\"user1\", \"user2\"]}` private sharing, only user1 & user2 have read access  \n`{write: [\"user1\", \"user2\"]}` private sharing, user1 & user2 have read & write access  \n`{read: true, write: [\"user1\"]}` private sharing, but only user1 has write access  \n\ndepending on the access setting, a _design doc has to be created that prevents\nunauthorized users to make changes to the shared objects. And if the share allows\nchanges, they need to be replicated to users $shares database and the changes need\nto be incorporated into the \"real objects\".\n\n\n\n## To be done\n\n* The current implementation is not bidirectional yet.\n  I can read and subscribe to a share, but not make changes yet.\n* the `password` setting  \n  When the sharing is public and a password is set, the objects can be only accessed\n  with the password. Users that are liste\n\n\n  ",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hoodiehq/worker-shares/issues"
  },
  "_id": "hoodie-worker-shares@0.0.5",
  "dist": {
    "shasum": "1cab4b1f4df3b4225e691c236e7b7ebd5a268215"
  },
  "_resolved": "git://github.com/hoodiehq/worker-shares.git#1ac7bd4252789f391e0f4973c20627e241c830dd",
  "_from": "worker-shares@git://github.com/hoodiehq/worker-shares.git"
}
